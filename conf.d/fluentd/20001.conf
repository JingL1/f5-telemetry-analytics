<source>
  @type udp
  @log_level debug
  tag http_input
  # format json
  # format /[^ ]* (?<timestamp>.*) (?<bigip-info>.* .* .* .* .*) [^ ]*: (?<client-ip>.*) [^ ]*: (?<host>.*) [^ ]*: (?<user-agent>(.* \(.*\))|(.*)) [^ ]*: (?<cookie>.*) [^ ]*: (?<method>.*) [^ ]*: (?<uri>.*) [^ ]*: (?<username>.*) [^ ]*: (?<content-type>.*) [^ ]*: (?<server-ip>.*) [^ ]*: (?<latency>.*) [^ ]*: (?<status>.*$)/
  format /[^ ]* (?<timestamp>.*) [^ ]*: (?<client-ip>.*) [^ ]*: (?<host>.*) [^ ]*: (?<user-agent>(.* \(.*\))|(.*)) [^ ]*: (?<cookie>.*) [^ ]*: (?<method>.*) [^ ]*: (?<uri>.*) [^ ]*: (?<username>.*) [^ ]*: (?<content-type>.*) [^ ]*: (?<server-ip>.*) [^ ]*: (?<latency>.*) [^ ]*: (?<status>.*$)/
  port 20001
  bind 0.0.0.0
</source>

<filter http_input>
  @type geoip
  @log_level debug
  geoip_lookup_keys client-ip
  backend_library geoip2_c

  <record>
    city            ${city.names.en["client-ip"]}
    geo             ${location.latitude["client-ip"]},${location.longitude["client-ip"]}
    country         ${country.iso_code["client-ip"]}
    country_name    ${country.names.en["client-ip"]}
    postal_code     ${postal.code["client-ip"]}
    region_code     ${subdivisions.0.iso_code["client-ip"]}
    region_name     ${subdivisions.0.names.en["client-ip"]}
  </record>
</filter>

# <match http_input>
#    @type stdout
# </match>

<match http_input>
  @type elasticsearch
  @log_level debug
  host elasticsearch
  port 9200
  flush_interval 1s
  index_name http-fluentd
</match>